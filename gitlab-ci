variables:
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""

stages:
  - install
  - qa
  - build
  - push
  - release

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - app/vendor

.variables_template: &variables_definition
  variables:
    XDEBUG_MODE: coverage
    APP_ENV: testing
    DB_CONNECTION: sqlite
    DB_DATABASE: ":memory:"
    QUEUE_CONNECTION: sync
    CACHE_DRIVER: array

install:
  image: gl.del.lv/ci-cd/docker-php-devel:latest
  <<: *variables_definition
  stage: install
  tags:
    - mq-next
    - install
  script:
    - echo "Installing composer dependencies"
    - cd app && composer install --prefer-dist --no-interaction
    - find vendor -type d -name .git -prune -exec rm -rf {} \;

test:
  image: gl.del.lv/ci-cd/docker-php-devel:latest
  <<: *variables_definition
  stage: qa
  tags:
    - mq-next
    - test
  artifacts:
    untracked: true
    reports:
      cobertura: build/cobertura-coverage.xml
  script:
    - echo "Running phpunit tests"
    - cd app && php vendor/bin/phpunit --coverage-cobertura build/cobertura-coverage.xml

coding-standards:
  image: gl.del.lv/ci-cd/docker-php-devel:latest
  <<: *variables_definition
  stage: qa
  tags:
    - mq-next
    - test
  script:
    - echo "Checking coding standards"
    - cd app && php vendor/bin/php-cs-fixer fix --dry-run -v --diff

static-analysis:
  image: gl.del.lv/ci-cd/docker-php-devel:8.0-cli-alpine-v1.7.0
  <<: *variables_definition
  stage: qa
  script:
    - echo "Running static-analysis tool - PHPStan"
    - cd app && php vendor/bin/phpstan analyse --ansi

coverage:
  image: gl.del.lv/ci-cd/docker-php-devel:8.0-cli-alpine-v1.7.0
  <<: *variables_definition
  stage: qa
  tags:
    - mq-next
    - test
  script:
    - echo "Running coverage reports"
    - cd app && php vendor/bin/phpunit --coverage-text --colors=never

build:
  image: gl.del.lv/ci-cd/docker:20.10-v1.2.1
  stage: build
  tags:
    - mq-next
    - build
  artifacts:
    paths:
      - release.${CI_COMMIT_TAG}.tar.gz
  script:
    - mkdir -p release
    - cp -rf app release
    - cp .env.example release/app/.env.example
    - cp workers.conf release/app/workers.conf
    - cd release && tar -czvf ../release.${CI_COMMIT_TAG}.tar.gz app
  rules:
    - if: $CI_COMMIT_TAG

push:
  stage: push
  tags:
    - mq-next
    - push
  image: gl.del.lv/ci-cd/docker:20.10-v1.2.1
  variables:
    GIT_STRATEGY: none
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}"
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file release.${CI_COMMIT_TAG}.tar.gz ${PACKAGE_REGISTRY_URL}/release-${CI_COMMIT_TAG}.tar.gz
  rules:
    - if: $CI_COMMIT_TAG

release:
  stage: release
  tags:
    - mq-next
    - release
  image: gl.del.lv/ci-cd/docker:20.10-v1.2.1
  variables:
    GIT_STRATEGY: none
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}"
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"release.${CI_COMMIT_TAG}.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/release-${CI_COMMIT_TAG}.tar.gz\"}"
  rules:
    - if: $CI_COMMIT_TAG
